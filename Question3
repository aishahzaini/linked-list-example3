//to delete a given data
#pragma once
//List.h
//Declaration of class List

#include<iostream>
using namespace std;

#ifndef LIST_H
#define LIST_H

template<class DataType>
class List
{
private:
	class Node
	{
	public:
		DataType data;
		Node* link;
	};
	Node* pHead;
	Node* pCurr;
	Node* pTemp;
	Node* pBefore;
	int numItem;
public:
	List();
	~List();
	void AddToFront();
	void DeleteMiddle(DataType target);
	bool traverse(DataType target);
	void printData();
	int NumberOfItem();
};
#endif


//Define implementation of all methods in class List

template<class DataType>
List<DataType>::List()
{
	numItem = 0;
	pHead = 0;
}

template<class DataType>
List<DataType>::~List()
{}

template<class DataType>
void List<DataType>::AddToFront()
{
	DataType item;
	Node* pNew = new Node;
	cout << "Enter data : ";
	cin >> item;
	pNew->data = item;
	pNew->link = pHead;
	pHead = pNew;
	numItem++;
}

template<class DataType>
bool List<DataType>::traverse(DataType target)
{
	if (numItem == 0)
		cout << "There is no item in the list" << endl;
	else
	{
		pCurr = pHead;
		while (pCurr->data != target && pCurr->link != 0)
		{
			pCurr = pCurr->link;
		}
		if (pCurr->data == target)
			return true;
		else
			return false;
	}


}

template<class DataType>
void List<DataType>::DeleteMiddle(DataType target)
{	
	pTemp = pHead;

	while (pTemp != 0 && pTemp->data != target)
	{
		pBefore = pTemp;
		pTemp = pTemp->link;
	}

	if (pTemp->data == target)
	{
		pBefore->link = pTemp->link;
		delete pTemp;
		numItem = numItem - 1;
		cout << "One item is deleted. " << endl;
	}
	else
	{
		cout << "Target not found.";
	}
	
}

template<class DataType>
void List<DataType>::printData()
{
	pCurr = pHead;
	while (pCurr != 0)							//0 is NULL value at the end of the list
	{
		cout << pCurr->data << " ";
		pCurr = pCurr->link;
	}
	cout << "\n";
}

template<class DataType>
int List<DataType>::NumberOfItem()
{
	return numItem;
}

//ListMain.cpp

#include <iostream>
using namespace std;
#include "List.h"

void main()
{
	List<char> x;
	char target;

	for (int i = 0; i < 3; i++)
	{
		x.AddToFront();
	}

	cout << "\nNumber Of Item Now : " << x.NumberOfItem();
	cout << "\nThe list are : " << endl;
	x.printData();

	cout << "\nDelete item : ";
	cin >> target;
	x.traverse(target);

	if (x.traverse(target) == true)
	{
		x.DeleteMiddle(target);
		cout << "\nNumber of item now : " << x.NumberOfItem() << endl;
		
		cout << "The new list are : " << endl;
		x.printData();
	}
	else
		cout << "Data is not found. Couldn't delete item from list.";

}
